generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Component {
  id                   String                 @id @default(uuid())
  orgId                String
  name                 String                 @unique
  description          String?
  status               ComponentStatus        @default(OPERATIONAL)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  incidents            IncidentComponent[]
  maintenanceComponent MaintenanceComponent[]

  @@index([orgId])
}

model Incident {
  id               String              @id @default(uuid())
  orgId            String
  title            String
  description      String
  status           IncidentStatus      @default(INVESTIGATING)
  occuredAt        DateTime
  resolvedAt       DateTime?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  components       IncidentComponent[]
  IncidentTimeline IncidentTimeline[]

  @@index([orgId])
  @@index([status])
}

model IncidentComponent {
  id          String          @id @default(uuid())
  orgId       String
  incident    Incident        @relation(fields: [incidentId], references: [id])
  incidentId  String
  component   Component       @relation(fields: [componentId], references: [id])
  componentId String
  status      ComponentStatus
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@unique([incidentId, componentId])
  @@index([componentId])
  @@index([incidentId])
  @@index([status])
  @@index([orgId])
}

model IncidentTimeline {
  id         String         @id @default(uuid())
  orgId      String
  userId     String
  message    String
  status     IncidentStatus
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  incident   Incident       @relation(fields: [incidentId], references: [id])
  incidentId String

  @@index([orgId])
  @@index([incidentId])
  @@index([userId])
}

model Maintenance {
  id          String                 @id @default(uuid())
  orgId       String
  title       String
  description String
  status      MaintenanceStatus      @default(SCHEDULED)
  startAt     DateTime
  endAt       DateTime
  createdAt   DateTime               @default(now())
  updatedAt   DateTime               @updatedAt
  components  MaintenanceComponent[]
  timeline    MaintenanceTimeline[]

  @@index([orgId])
  @@index([status])
}

model MaintenanceComponent {
  id            String          @id @default(uuid())
  orgId         String
  maintenance   Maintenance     @relation(fields: [maintenanceId], references: [id])
  maintenanceId String
  component     Component       @relation(fields: [componentId], references: [id])
  componentId   String
  status        ComponentStatus
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  @@unique([maintenanceId, componentId])
  @@index([componentId])
  @@index([maintenanceId])
  @@index([orgId])
}

model MaintenanceTimeline {
  id            String            @id @default(uuid())
  orgId         String
  userId        String
  message       String
  status        MaintenanceStatus
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  maintenance   Maintenance       @relation(fields: [maintenanceId], references: [id])
  maintenanceId String

  @@index([orgId])
  @@index([maintenanceId])
  @@index([userId])
}

enum ComponentStatus {
  OPERATIONAL
  DEGRADED
  PARTIAL_OUTAGE
  MAJOR_OUTAGE
}

enum IncidentStatus {
  INVESTIGATING
  IDENTIFIED
  MONITORING
  RESOLVED
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
